plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "org.sonarqube" version "2.7"
}
// Codecov: b8facb7d-06f4-4c48-bb3f-3de04cec6d07
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group = 'xyz.tag'
version = '2'
sourceCompatibility = '11'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    set('springBootAdminVersion', "2.2.3")
    set('springCloudVersion', "Hoxton.BUILD-SNAPSHOT")
}


//test {
//    jacoco {
//        append = false
//        reports {
//            xml.enabled true
//            xml.destination "${buildDir}/reports/jacoco/report.xml"
//            html.enabled false
//            csv.enabled false
//        }
//    }
//}

//jacocoTestReport {
//    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
//    reports {
//        xml.enabled false
//        csv.enabled false
//        html.enabled true
////        html.destination "${buildDir}/jacoco/html"
////        html.destination "${buildDir}/reports/jacoco/html"
//    }
//}

task codeCoverageReport(type: JacocoReport) {
    dependsOn = subprojects.test
//    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
//    classDirectories =  files(subprojects.sourceSets.main.output)
//    executionData = files(subprojects.jacocoTestReport.executionData)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets xyz.tag.twitch
        test
    }

    reports {
        xml.enabled true
//        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled true
        csv.enabled true
    }
}

codeCoverageReport.dependsOn {
    test
}

test {
    finalizedBy codeCoverageReport
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    implementation 'de.codecentric:spring-boot-admin-starter-server'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.netflix.feign:feign-gson:8.18.0'
    implementation 'com.netflix.feign:feign-slf4j:8.18.0'
    implementation 'javax.validation:validation-api:2.0.1.Final'

    compile 'io.springfox:springfox-swagger-ui:2.9.2'
    compile "io.springfox:springfox-bean-validators:2.9.2"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:2.6.0'

    testImplementation 'com.h2database:h2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'io.github.openfeign:feign-mock:10.2.0'
    testCompile 'org.mockito:mockito-core'
    testCompile 'org.mockito:mockito-junit-jupiter'

    //LOMBOK
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompile 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
	useJUnitPlatform()
}